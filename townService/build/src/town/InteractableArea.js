export const PLAYER_SPRITE_WIDTH = 32;
export const PLAYER_SPRITE_HEIGHT = 64;
export default class InteractableArea {
    _id;
    _x;
    _y;
    _width;
    _height;
    _occupants = [];
    _townEmitter;
    get id() {
        return this._id;
    }
    get occupantsByID() {
        return this._occupants.map(eachPlayer => eachPlayer.id);
    }
    get isActive() {
        return this._occupants.length > 0;
    }
    get boundingBox() {
        return { x: this._x, y: this._y, width: this._width, height: this._height };
    }
    constructor(id, { x, y, width, height }, townEmitter) {
        this._id = id;
        this._x = x;
        this._y = y;
        this._width = width;
        this._height = height;
        this._townEmitter = townEmitter;
    }
    add(player) {
        this._occupants.push(player);
        player.location.interactableID = this.id;
        this._townEmitter.emit('playerMoved', player.toPlayerModel());
        this._emitAreaChanged();
    }
    remove(player) {
        this._occupants = this._occupants.filter(eachPlayer => eachPlayer !== player);
        player.location.interactableID = undefined;
        this._townEmitter.emit('playerMoved', player.toPlayerModel());
        this._emitAreaChanged();
    }
    addPlayersWithinBounds(allPlayers) {
        allPlayers
            .filter(eachPlayer => this.contains(eachPlayer.location))
            .forEach(eachContainedPlayer => this.add(eachContainedPlayer));
    }
    contains(location) {
        return (location.x + PLAYER_SPRITE_WIDTH / 2 > this._x &&
            location.x - PLAYER_SPRITE_WIDTH / 2 < this._x + this._width &&
            location.y + PLAYER_SPRITE_HEIGHT / 2 > this._y &&
            location.y - PLAYER_SPRITE_HEIGHT / 2 < this._y + this._height);
    }
    overlaps(otherInteractable) {
        const toRectPoints = ({ _x, _y, _width, _height }) => ({
            x1: _x - PLAYER_SPRITE_WIDTH / 2,
            x2: _x + _width + PLAYER_SPRITE_WIDTH / 2,
            y1: _y - PLAYER_SPRITE_HEIGHT / 2,
            y2: _y + _height + PLAYER_SPRITE_HEIGHT / 2,
        });
        const rect1 = toRectPoints(this);
        const rect2 = toRectPoints(otherInteractable);
        const noOverlap = rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2 || rect1.y1 >= rect2.y2 || rect2.y1 >= rect1.y2;
        return !noOverlap;
    }
    _emitAreaChanged() {
        this._townEmitter.emit('interactableUpdate', this.toModel());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJhY3RhYmxlQXJlYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b3duL0ludGVyYWN0YWJsZUFyZWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUV2QyxNQUFNLENBQUMsT0FBTyxPQUFnQixnQkFBZ0I7SUFFM0IsR0FBRyxDQUFTO0lBR3JCLEVBQUUsQ0FBUztJQUdYLEVBQUUsQ0FBUztJQUdYLE1BQU0sQ0FBUztJQUdmLE9BQU8sQ0FBUztJQUdkLFVBQVUsR0FBYSxFQUFFLENBQUM7SUFHNUIsWUFBWSxDQUFjO0lBRWxDLElBQVcsRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlFLENBQUM7SUFRRCxZQUFtQixFQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWUsRUFBRSxXQUF3QjtRQUMzRixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNk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